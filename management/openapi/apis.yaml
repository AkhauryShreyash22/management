openapi: '3.0.0'
info:
  description: |-
    This document describes all the APIs that is being developed for the
    Practice application and the companion website/mobile application.     
  version: 1.0.0
  title: API for Practice.

tags:
- name: user

paths:
  /user/add_user:
    post:
      tags:
      -  user
      summary: add the user
      operationId: addUser
      "x-mojo-to": "user#add_user"
      description: This operation adds the user.

      
      requestBody:
        description: 'Registers The Resturant'
        required: true
        content:
          application/json:
            schema:
             type: object
             properties:
              first_name:
                type: string
                example: "Rohit"
                description: "First Name"
              last_name:
                type: string
                example: "Sharma"
                description: "Last Name"
              email:
                type: string
                example: "abcd@mail"
                description: "Email"
              mobile:
                 type: string
                 example: 83474837483
                 description: "Mobile"
              password:
                 type: string
                 example: "123@4"
                 description: "password"
              rep_password:
                 type: string
                 example: "er33"
                 description: "Repeat Password"
      responses:
        200:
          description: "Resturant added"
          content:
            application/json:    
              schema:
                type: object
                properties:
                  apiresponse:
                    $ref: '#/components/schemas/ApiResponse'
        400: 
          description: invalid input, object invalid
  
  /user/list_user:
    get:
      tags:
      - user
      summary: provides list of all Users.
      operationId: listUser
      "x-mojo-to": "user#list_user"
      description: This API endpoint searches for work.
      
      parameters:
  
        - in: query
          name: user_id
          schema:
            type: string
            example: 66522a1e654a96b48c8a6aaf

       
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:    
              schema:
                type: object
                properties:
                  apiresponse:
                    $ref: 'https://schemas.redgrape.tech/openapi/common.json#/components/schemas/ApiResponse'
                 
        400: 
          description: invalid input, object invalid

  /user/delete_user:
    delete:
      tags:
      - user
      summary: provides list of all Users.
      operationId: deleteUser
      "x-mojo-to": "user#delete_user"
      description: This API endpoint searches for work.
      
      parameters:
  
        - in: query
          name: id
          schema:
            type: string
            example: 66522a1e654a96b48c8a6aaf

       
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:    
              schema:
                type: object
                properties:
                  apiresponse:
                    $ref: 'https://schemas.redgrape.tech/openapi/common.json#/components/schemas/ApiResponse'
                 
        400: 
          description: invalid input, object invalid


components:
 schemas:
  ApiResponse:
    type: object
    required:
    - code
    - type
    - severity
    - message
    properties:
      code:
        description: A code for this response. This code shall be referred in the documentation / error glossary.
        type: string
        example: USER_001
      type:
        description: The type of this response.
        type: string
        example: "OK, ERROR, SYSTEM_ERROR"
        enum:
         - OK
         - ERROR
         - SYSTEM_ERROR
      severity:
        description: The nature of the message with respect to the attention it deserves from the end user via UI/UX. eg INFO would mean a positive or expected response to the user. WARN would mean that something awkward happened and user needs to be told and acknowledgement taken.
        type: string
        enum: 
          - DEBUG
          - INFO
          - WARN
          - ERROR
      message:
        description: A user firendly message that the end user can be communicated. The end user is expected to understand this message.
        type: string
